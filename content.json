{"posts":[{"title":"Msuite2:一体式DNA甲基化分析及可视化软件","text":"什么是DNA甲基化DNA甲基化是一种重要的表观遗传调控因子。在哺乳动物基因组中，最普遍且重要的DNA甲基化类型是5-甲基胞嘧啶(5mC)。该类型会在DNA甲基转移酶（DNMT）的作用下，将S-腺苷甲硫氨酸（S-adenyl methionine）的甲基基团转移到胞嘧啶的第五个碳原子上，从而形成5-甲基胞嘧啶（5mC）[1,2]。这种现象主要发生在CpG二核苷酸位点上，即一个胞嘧啶（C）核苷酸与一个鸟嘌呤（G）核苷酸相邻的位置。 DNA甲基化与癌症众所周知，DNA甲基化模式的改变往往和癌症相关。正常个体基因组中大部分CpG位点都是存在甲基化的，而CpG岛以及远端的调控元件区域则是对DNA甲基转移酶（DNMT）具有一定抗性。而在癌症细胞中，基因组上的5mC会出现大范围丢失，而在启动子或者增强子等区域会出现异常增加。而正是这种DNA甲基化模式的改变，抑制了抑癌基因的表达并且促进了原癌基因的表达，从而促进了肿瘤的发生[1]。 白色圆圈代表未甲基化CpG位点；黑色圆圈代表甲基化CpG位点 DNA甲基化的分析手段在过去几年中，已经有多种高分辨率的DNA甲基化分析方法被开发出来。其中最常见的方法是重亚硫酸盐法[6,7]。为了区分甲基化的胞嘧啶和非甲基化的胞嘧啶，该方法将未甲基化的胞嘧啶转化成尿嘧啶，而经过甲基化修饰的胞嘧啶并不受影响，仍然保持胞嘧啶的状态。随后在进行PCR进行扩增时，尿嘧啶会被识别为胸腺嘧啶。随后在PCR的扩增下，序列中未甲基化的C都变成了T。由于在哺乳动物中被甲基化修饰的胞嘧啶主要出现在CpG二核苷酸位点上，仅占了全基因组C的5%左右。因此这种方法会导致基因组大部分胞嘧啶发生改变，从而使得测序数据的GC含量与真实含量相差很大。为此研究人员开发了非重亚硫酸盐法来检测DNA甲基化（例如TAPS法[5]）。与重亚硫酸盐法相比，该方法只会对将甲基化的C转化为T，而未甲基化的C不会改变。这样就使得只有很少的胞嘧啶发生的改变，从而解决GC偏差问题，并且还可以获得更高的序列复杂性和更低的DNA降解率等优势。 Msuite的技术优势然而，目前主流的DNA甲基化分析工具大多只支持重亚硫酸盐法的数据处理，而对于非重亚硫酸盐法所产生的数据并不兼容。部分软件支持非重亚硫酸盐法的数据处理，但是这些软件大多仅使用的是通配符比对法，导致其比对效率以及准确度较低。除此之外，市面上绝大多数软件仅仅只支持序列比对，在上游质控、下游甲基化位点检测以及数据可视化等方面并不完善。在此，我向你推荐一款一体式DNA甲基化分析及可视化软件：Msuite[3,4]。该软件兼容当前市面上所有主流的DNA甲基化数据。同时软件还集成了质控、比对、甲基化位点检测以及数据可视化一体式服务，真正做到了性能出众，易于使用。 Msuite2方法搭建运行环境及其依赖库首先我们下载最新的Msuite2的程序包 ，并通过tar zxf Msuite2-2.1.0.tar.gz进行解压。其中主程序msuit2就在新创建的文件夹msuite2-2.1.0中。 为了顺利的运行Msuite2，您还需要确保您的Linux/Unix系统中安装了g++ (v4.8)、perl (v5.10)、R (v3.0)、Bash 4，并且保证其版本号不低于上述所提到的版本号。 此外您还需要安装bowtie2、hisat2、samtools，并且确保这些软件在您的环境变量中可以直接唤起。 当然msuite2-2.1.0文件夹中还包含了预编译的可执行文件。如果您的主程序msuite2不能正常使用，或者您想让msuite2更加适配您的系统，您可以运行如下命令： 1user@linux$ make clean &amp;&amp; make 注意: 大部分主程序msuit2不能运行都是由于较低的libc++库导致的。 构建索引在运行Msuite2时，您需要先对参考基因组构建索引。为此，您只需要准备GENOME.FA、REFSEQ.txt便可以使用./msuite2-2.1.0/build.index/build.index.sh来进行构建。 1234user@linux$ ./msuite2-2.1.0/build.index/build.index.sh \\ GENOME.FA(or GENOME.DIR) \\ REFSEQ.txt(or Gene.anno.gff) \\ Genome.ID 其中hg38和mm10的RefSeq文件都已经下载在./msuite2-2.1.0/build.index/文件夹中，您也可以从UCSC genome browser下载其他物质或其他基因版本的RefSeq文件。值得注意的是： 对于基因序列文件GENOME.FA，您需要提供包含多个fasta的单一文件，或者提供包含多个染色体序列文件的文件夹； build.index.sh会自动整合Lambda基因组来构建索引； RefSeq.txt可以使用GFF格式的注释文件（注意：文件名必须包含gff字符）； 此外GENOME.FA、RefSeq.txt（or Gene.anno.gff）支持Gzip或者Bzip2压缩格式。注意，压缩文件后缀必须与压缩格式相对应（例如：Gzip压缩格式的REFSEQ.txt.gz文件以及Bzip2压缩格式的REFSEQ.txt.bz2文件）； Genome.ID是构建基因组索引的名称，并会写入到./msuite2-2.1.0/index/当中。并且，构建基因组索引的个数不受限制。 运行Msuite2您可以通过运行下述命令来将Msuite2添加到您的环境变量中： 1user@linux$ export PATH=$PATH:$PWD Msuite2提供了两种分析模式3-letter和4-letter模式。如果您的数据是重亚硫酸盐法，您需要选择3-letter模式，并且需要设置-m BD参数；如果您的数据是非重亚硫酸盐法或者其他non-CpG甲基化比例很低的数据（例如，人体的大部分体细胞组织）时，您需要选择4-letter模式并设置-m TAPS参数。3-letter模式： 1234user@linux$ msuite2 -x hg38 -m BS -3 -p 8 \\ -1 ./testing_dataset/simu.read1.fq.gz \\ -2 ./testing_dataset/simu.read2.fq.gz \\ -o ./testing_dataset/Msuite.Mode3 4-letter模式： 1234user@linux$ msuite2 -x hg38 -m TAPS -4 -p 8 \\ -1 ./testing_dataset/simu.read1.fq.gz \\ -2 ./testing_dataset/simu.read2.fq.gz \\ -o ./testing_dataset/Msuite.Mode4 在运行上述命令后，makefie 文件会被生成在输出文件夹中（-o选项）。此时您可以在该文件中运行如下命令： 1user@linux$ cd /path/to/output/dir; make 然后Msuite2会对数据进行处理，包括去接头，质控，比对，甲基化分析以及数据可视化。 值得注意的是： -x指定参考基因组索引，与之前的Genome.ID相对应； -m参数与-3/-4必须相互对应。对于WGBS数据，可以设置-m BS和-3参数，对于TAPS数据或类似数据，可以设置-m TAPS和-4参数； -p是确定使用线程数，-p 0设置为使用所有线程数； -1和-2指定输入文件，如果您的输入序列为单链只需提供-1参数即可，-o指定输出文件； 您可以通过设置-k nextera来直接分析ATAC-me或类似数据； 如何您需要添加多个.fq文件，您可以通过,来进行分割。例如：-1 ./lane1.read1.fq.gz,./lane2.read1.fq.gz -2 ./lane1.read2.fq.gz,./lane2.read2.fq.gz 如果您需要添加所有.fq文件，您可以按照如下来设置-1 '/path/to/lane*.read1.fq.gz' -2 '/path/to/lane*.read2.fq.gz'，请注意单引号对于防止*****被shell提取十分重要； 如果您不想分析完整reads，您还可以通过设置-c cycle参数来实现。例如：您由于序列质量问题只想分析reads的前75bp，您可以设置-c 75参数。如果您想要跳过头尾的5/10 bp，您可以设置--cut-r1-head 5 --cut-r1-tail 10 --cut-r2-head 5 --cut-r2-tail 10来实现； 此外，您还可以在./msuite2-2.1.0/testing_dataset中找到测试文件进行测试。并且Msuite2还提供了./msuite2-2.1.0/run_testing_dataset.sh作为示例，用于构建引用并自动在测试数据集上运行分析。用户可以使用以下命令调用它: 1user@linux$ ./run_testing_dataset.sh 其他功能并且Msuite2还包括一个Mviewer工具来提供核苷酸水平，genotype-preserved DNA methylation数据的可视化。更多信息可以参考Mviewer文件夹中的README文件。此外，./msuite2-2.1.0/util/文件夹中，您可以使用pe_bam2bed.pl和se_bam2bed.pl程序将BAM文件转化为BED格式文件，还可以通过bed2wig来将BED文件转化为WIG文件。此外您还可以使用extract.meth.in.region来提取特定区域的CpG位点，C-count和T-count。 Msuite2结果分析Msuite运行的所有结果都放在-o OUTDIR所指定的文件夹中，同时Msuite会生成HTML文件（Msuite2.report/index.html）来报告分析结果质量：包括质控情况，比对率，CpG位点的总体甲基化水平，M-bias，转化效率（通过比对到Lamda基因组的reads数来估计） 比对结果被存储在bam文件和sam文件中：Msuite2.final.bam和Msuite2.final.sam。甲基化结果被存储在Msuite2.CpG.meth.call，Msuite2.CpH.meth.call和Msuite2.CpG.meth.bedgraph。您可以在输出文件中运行make clean来删除中间文件以节省存储空间。 Skvortsova, Ksenia, Clare Stirzaker, and Phillippa Taberlay. “The DNA methylation landscape in cancer.” Essays in biochemistry 63.6 (2019): 797-811. Moore, Lisa D., Thuc Le, and Guoping Fan. “DNA methylation and its basic function.” Neuropsychopharmacology 38.1 (2013): 23-38. Li, Lishi, et al. “Msuite2: All-in-one DNA methylation data analysis toolkit with enhanced usability and performance.” Computational and Structural Biotechnology Journal 20 (2022): 1271-1276. Sun, Kun, et al. “Msuite: a high-performance and versatile DNA methylation data-analysis toolkit.” Patterns 1.8 (2020): 100127. Liu, Yibin, et al. “Bisulfite-free direct detection of 5-methylcytosine and 5-hydroxymethylcytosine at base resolution.” Nature biotechnology 37.4 (2019): 424-429. Cokus, Shawn J., et al. “Shotgun bisulphite sequencing of the Arabidopsis genome reveals DNA methylation patterning.” Nature 452.7184 (2008): 215-219. Lister, Ryan, et al. “Highly integrated single-base resolution maps of the epigenome in Arabidopsis.” Cell 133.3 (2008): 523-536.","link":"/2023/10/13/Msuite2/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/10/13/hello-world/"},{"title":"RNAseq 分析流程","text":"其实现在RNA seq的处理方法已经很成熟了，同时版本也很多。在这里我结合Sun lab流程，整理了一种ktrim+STAR+featureCount的方法供大家讨论。希望可以对大家有些许帮助。 预处理第一步是对转录组数据进行预处理，主要是质控和取接头。相对于常规流程来说，这里我们提供了在预处理这一步就去重复。先去重复的好处就是比对速度可以大大提升，同时对后续影响也基本上没有。这里我们使用的是ktrim 和 krmdup。 1234sid=sample1/path/to/ktrim -o $sid.ktrim -t 4 -1 ./${sid}_R1.fq.gz -2 ./${sid}_R2.fq.gz/path/to/Krmdup -a $sid.ktrim.read1.fq -b $sid.ktrim.read2.fq -o $sid.rmdup 对比STAR 构建索引首先你需要下载 参考基因组 hg38.p13.fa和 注释文件 Homo_sapiens.GRCh38.v101.gtf 1234567/path/to/STAR_2.7.9a \\ --runThreadN 32 --runMode genomeGenerate \\ --limitGenomeGenerateRAM 64000000000 --genomeSAindexNbases 6 \\ --genomeDir hg38.HBV.EBV \\ --sjdbOverhang 149 \\ --sjdbGTFfile ./Homo_sapiens.GRCh38.v101.gtf \\ --genomeFastaFiles ./hg38.p13.fa Mapping这里使用的是STAR进行比对。同时也可以参考TCGA的RNAseq处理参数。 123456789101112/path/to/STAR_2.7.9a --genomeDir $STARindex \\ --runThreadN $thread \\ --readFilesIn $sid.rmdup.read1.fq $sid.rmdup.read2.fq \\ --outFileNamePrefix STAR/$sid. \\ --outSAMtype BAM Unsorted \\ --outSAMunmapped None \\ --outSAMattributes Standard \\ --outSAMstrandField intronMotif \\ --alignIntronMin 20 --alignIntronMax 100000 samtools sort -@ $thread -o STAR/$sid.srt.bam STAR/$sid.Aligned.out.bamsamtools index -@ $thread STAR/$sid.srt.bam 这里主要程序就处理完了。当然你可以生成.bw文件来放到UCSC 或者 igv上进行可视化。 定量分析这里使用的是featureCount进行处理。其中可以写一个脚本将$sid.featureCount中的TPM 、Counts、 FPKM提取出来以备后续使用。 12featureCounts -a $GFF -o $sid.featureCount -T 32 STAR/$sid.srt.bamgzip $sid.featureCount 差异分析大多使用Deseq2 进行差异分析 待续… 基因富集David 待续…","link":"/2023/10/26/RNAseq/"},{"title":"scRNA分析流程（一）","text":"scRNA分析在最近几年发展迅速，对于其分析流程也比较成熟了。现在主流的scRNA分析主要有两种。一种是10×分析流程，一种的Smart-seq分析流程。在此我整理了一套scRNA的分析流程供大家讨论。 数据处理Smart-seq数据Smart-seq数据其实是通过实验方法将细胞分成单个细胞，然后再进行测序。所以对Smart-seq数据其实可以参考之前RNA-seq数据的处理方法。相比较Bulk RNA-seq数据，Smart-seq的质量相对来说会低一些。 10×数据处理更高通量的单细胞数据处理方法是采用cellrange的来处理的。其中需要注意的是，fastq文件需要将名字修改成对应格式[Sample Name]_S1_L00[Lane Number]_[Read Type]_001.fastq.gz。其中I1, I2是样本的index号，R1, R2是Read1、Read2。 12/path/to/sample1_S1_L001_R1_001.fastq.gz/path/to/sample2_S1_L001_R2_001.fastq.gz 此外你还需要准备好Reference。Cellranger提供了小鼠和人类的参考基因组下载。 123456fastq_path=/path/to/fastqcellranger=/path/to/cellranger-5.0.1/cellrangertranscriptome=/path/to/cellranger-5.0.1/cellranger/refdata-gex-GRCh38-2020-A/$cellranger count --id=$id --transcriptome=$transcriptome --fastqs=$fastq_path --sample=$id --transcriptome参考基因组路径 --fastqsfastq文件路径 Seurat 处理加载数据Smart seqSmart-seq数据需要整理一个矩阵。每一行是一个基因的reads数，每一列是一个样本。 12345Gene sample1 sample2 ... sampleNgene1 1 14 ... 204gene2 4 23 ... 322... geneN 34 123 ... 43 同时需要一个meta文件。每一行都是一个样本信息 1234cellid Age CellTypesample1 50 deltasample2 60 acinarsample3 68 ductal 12345678910111213## load data and build Seurat objectcr = read.table( paste0(sid, &quot;_scRNA_matrix.gz&quot;), head=T, row.names=1,check.names=F);cr = cr[ , row.names(info) ];sce= CreateSeuratObject( counts=cr, project=sid, min.cells=3, min.features=100 );## load info, select cellsinfo = read.table(&quot;cell.anno&quot;, row.names=1, head=T)anno = data.frame( info[, &quot;CellType&quot;] )row.names(anno) = row.names(info)age = data.frame( info[, &quot;Age&quot;] )row.names(age) = row.names(info) 过滤然后标准化后可以通过meta文件添加样本信息 1234## load Cell annotations## 3 features: CellType, Agesce = AddMetaData(sce, as.vector(anno), col.name=&quot;CellType&quot;)sce = AddMetaData(sce, as.vector(age), col.name=&quot;Age&quot;) 10×其实10×的数据很简单只需要.h5文件就好了。 123456789101112suppressPackageStartupMessages({ library(Seurat);library(plyr);library(dplyr);library(cowplot); library(ggplot2);library(gridExtra);library(ggthemes);library(patchwork); library(forcats);library(DoubletFinder);});options( stringsAsFactors=F );sid = 'MDS4';## load data and build Seurat objectcr = Read10X_h5( paste0(sid, '.h5') );sc.raw = CreateSeuratObject( counts=cr, project=sid, min.cells=3, min.features=200 ); 质控对于线粒体基因数数量过高的细胞（可能是细胞活性较低），基因数量过低的细胞或者基因数量过高的多胞细胞也要排除。 12345678910111213141516171819202122232425262728293031323334## Quality controlsc.raw[[&quot;percent.mito&quot;]] = PercentageFeatureSet(sc.raw, pattern=&quot;^MT-&quot;);sc.raw[[&quot;percent.ribo&quot;]] = PercentageFeatureSet(sc.raw, pattern=&quot;^RP[SL]&quot;);p1=VlnPlot(sc.raw, features='nCount_RNA', y.max=70000, pt.size=0.05)+NoLegend();p2=VlnPlot(sc.raw, features='nFeature_RNA', y.max=10000, pt.size=0.05)+NoLegend();p3=VlnPlot(sc.raw, features='percent.mito', y.max=100, pt.size=0.05)+NoLegend();p4=VlnPlot(sc.raw, features='percent.ribo', y.max=100, pt.size=0.05)+NoLegend();grid.arrange(p1, p2, p3, p4, nrow=1, top=paste0('Before QC, cells=', dim(sc.raw)[2]));p5=FeatureScatter(sc.raw, feature1=&quot;nCount_RNA&quot;, feature2=&quot;percent.mito&quot;);p6=FeatureScatter(sc.raw, feature1=&quot;nCount_RNA&quot;, feature2=&quot;nFeature_RNA&quot;);p7=FeatureScatter(sc.raw, feature1=&quot;nCount_RNA&quot;, feature2=&quot;percent.ribo&quot;);p8=FeatureScatter(sc.raw, feature1=&quot;percent.mito&quot;, feature2=&quot;percent.ribo&quot;);grid.arrange(p5, p6, p7, p8, nrow=2);## filter, mostly filter out the cells with abnormally high chrM (i.e., dead cells)## outliners should also be filtered#sce = subset(sc.raw, subset=nCount_RNA&lt;4500 &amp; nFeature_RNA&lt;1500 &amp; percent.mito&lt;25);sce = subset(sc.raw, percent.mito&lt;25);## regress out unwanted genesall.gene = rownames( sce );cc.genes = c(cc.genes.updated.2019$s.genes, cc.genes.updated.2019$g2m.genes);RP=grep(rownames(sce), pattern=&quot;^RP[SL]&quot;, value=T, invert=F, ignore.case=T);MT=grep(rownames(sce), pattern=&quot;^MT-&quot;, value=T, invert=F, ignore.case=T);keep.genes = all.gene[!(all.gene %in% c(cc.genes, RP, MT))];sce = subset(sce, features=keep.genes); 标准化 PCA一般来说我们都使用的**LogNormalize**方法来进行标准化 1234567891011121314151617## normalize &amp; scale data, run PCAsce = NormalizeData(sce, normalization.method='LogNormalize', scale.factor=10000, verbose=F);sce = FindVariableFeatures(sce, selection.method='vst', nfeatures=2000, verbose=F);sce = ScaleData(sce);sce = RunPCA(sce, features=VariableFeatures(sce), verbose=F);sce = FindNeighbors(sce, dims=1:30);sce = FindClusters(sce, resolution=0.5, verbose=F);sce = RunTSNE(sce, dims=1:30);sce = RunUMAP(sce, dims=1:30, verbose=F);#DimPlot(sce,reduction = &quot;tsne&quot;, label=T,split.by ='orig.ident');#LabelClusters(DimPlot(sce, reduction = &quot;tsne&quot;),id = 'ident')UMAPPlot(sce, pt.size=1, label=T, group.by='RNA_snn_res.0.5')+ggtitle('res=0.5, before doublet removal'); 此外还提供了**SCTransform()**方法来进行标准化。这一个函数可以代替三个函数（NormalizeData, ScaleData, FindVariableFeatures）的运行。 且其对测序深度的校正效果要好于log标准化。（10万以内的细胞都建议使用SCT标准化）。SCTransform对测序深度的校正效果很好，也可用于矫正线粒体等因素的影响，但不能用于批次矫正。 1234567## find the optimal parameter, runs slowly## if log-normalization is used, set sct=F (default)## otherwise set it to T (is SCT-normalization is used)sweep.res.list = paramSweep_v3(sce, PCs=1:30, sct=F);sweep.stats = summarizeSweep(sweep.res.list, GT=F);bcmvn = find.pK(sweep.stats);pK_good = bcmvn$pK[which.max(bcmvn$BCmetric)] %&gt;% as.character() %&gt;% as.numeric(); 对双胞进一步过滤 12345678910111213141516171819202122232425262728293031## in 10x, doublet rate is related to the No. of recovered cells,## increases ~0.8% when recovering additional 1000 cells## Note that here I use the sc.raw as the recovered cellsDoubletRate = dim(sc.raw)[2] * 8e-6;homotypic.prop = modelHomotypic(sce$seurat_clusters);nExp_poi = round(DoubletRate*ncol(sce));nExp_poi.adj = round(nExp_poi*(1-homotypic.prop));sce = doubletFinder_v3(sce, PCs=1:30, pN=0.25, pK=pK_good, nExp=nExp_poi.adj, reuse.pANN=F, sct=F);## Plot results## note that DoubletFinder will add 1 column named &quot;DF.classifications_XXXX&quot;## which is parameter-specific and need to be renamedindex = grep(&quot;DF.classifications&quot;, colnames(sce@meta.data));colnames(sce@meta.data)[index] = &quot;DFpred&quot;;DimPlot(sce, reduction=&quot;umap&quot;, group.by=&quot;DFpred&quot;, order=c(&quot;Singlet&quot;, &quot;Doublet&quot;), cols=c(&quot;red&quot;, &quot;grey&quot;))+ggtitle( paste0(&quot;DoubletFinder result, pK=&quot;, pK_good) );write.table(sce$DFpred, file=paste0(sid, &quot;.DoubletFinder.result&quot;), quote=F, sep='\\t', row.names=T, col.names=F);## show No. of cells per clustercount.before.DF = as.data.frame(table(sce@meta.data$RNA_snn_res.0.5));total.before.DF = dim(sce)[2];## filter out doubletssce = subset( sce, DFpred==&quot;Singlet&quot; );sce = FindNeighbors(sce, dims=1:30);sce = FindClusters(sce, resolution=0.5, verbose=F);sce = RunTSNE(sce, dims=1:30);sce = RunUMAP(sce, dims=1:30, verbose=F); 可视化123456789101112131415161718192021222324252627282930313233## show No. of cells per clusterggplot(count.before.DF, aes(Var1, Freq))+geom_col()+labs(title=paste0(&quot;Before doublet removal, cells=&quot;, total.before.DF))+geom_text( aes(label=Freq), nudge_y=50 );count.after.DF = as.data.frame(table(sce@meta.data$RNA_snn_res.0.5));ggplot(count.after.DF, aes(Var1, Freq))+geom_col()+labs(title=paste0(&quot;After doublet removal, cells=&quot;, dim(sce)[2]))+geom_text( aes(label=Freq), nudge_y=30 );## show the UMI/feature/MT numbers and phase per clusterpa = FeaturePlot(sce, reduction=&quot;umap&quot;, features='nCount_RNA');pb = FeaturePlot(sce, reduction=&quot;umap&quot;, features='nFeature_RNA');pc = FeaturePlot(sce, reduction=&quot;umap&quot;, features='percent.mito');pd = DimPlot(sce, reduction=&quot;umap&quot;, group.by=&quot;Phase&quot;);grid.arrange(pa, pb, pc, pd, nrow=2);## Plot the cluster identificationsTSNEPlot(sce, pt.size=.5, label=T, group.by='RNA_snn_res.0.5')+ggtitle('res=0.5, after doublet removal');UMAPPlot(sce, pt.size=.5, label=T, group.by='RNA_snn_res.0.5')+ggtitle('res=0.5, after doublet removal');sce = SetIdent(sce,value='RNA_snn_res.0.5');sce$seurat_clusters=sce$RNA_snn_res.0.5;## find cluster markerscm = FindAllMarkers(sce, logfc.threshold=0.2, min.pct=0.25, only.pos=T, verbose=F);cm = cm[with(cm,order(cluster, p_val_adj, -avg_logFC)),];## plot known markersFeaturePlot(sce, reduction=&quot;umap&quot;, features=c(&quot;EPCAM&quot;, &quot;PTPRC&quot;, &quot;CD3D&quot;, &quot;CD68&quot;) ); 保存123## save projectsave(sce, file=paste0(sid, &quot;.rds&quot;));write.csv(cm, file=paste0(sid, &quot;.cluster.markers.csv&quot;));","link":"/2023/11/11/scRNA_1/"}],"tags":[{"name":"Epigenome","slug":"Epigenome","link":"/tags/Epigenome/"},{"name":"Methylation","slug":"Methylation","link":"/tags/Methylation/"},{"name":"software","slug":"software","link":"/tags/software/"},{"name":"Pipeline","slug":"Pipeline","link":"/tags/Pipeline/"},{"name":"Transcriptome","slug":"Transcriptome","link":"/tags/Transcriptome/"},{"name":"scRNA","slug":"scRNA","link":"/tags/scRNA/"}],"categories":[{"name":"pipeline","slug":"pipeline","link":"/categories/pipeline/"}],"pages":[{"title":"About","text":"由来从前有个小傻子，他一无所有，但是有一顶帽子。这个帽子对于他来说十分重要，所以他也很珍惜它。但是小傻子不知道的是，这顶漂亮的帽子内部却为了抉择出谁是最重要的一部分而相互争吵。但是只是争吵并不能获得一个让大家都心服口服的答案。所以他们创建了这个blog，目的是记录一下谁更厉害。哈哈哈哈哈。","link":"/about/index.html"}]}